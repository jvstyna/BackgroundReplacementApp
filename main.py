import cv2
import tkinter as tk
import time
import numpy as np

from PIL import Image
from transformers import pipeline

from source.image_app import ImageProcessingApp

class BackgroundReplacementApp(ImageProcessingApp):
    """
    A GUI application for background replacement in images.
    Attributes:
        root (tk.Tk): The root window of the application.
        pipe (Pipeline): The image segmentation pipeline for generating masks.
        btn_bg1 (tk.Button): Button to select the first background image.
        btn_bg2 (tk.Button): Button to select the second background image.
        btn_bg3 (tk.Button): Button to select the third background image.
        mask (np.ndarray): The mask generated by the segmentation pipeline.
        original_image (np.ndarray): The original image loaded by the user.
        result_image (np.ndarray): The resulting image after background replacement.
    """
    def __init__(self, root):
        super().__init__(root)
        self.root.title("Wymiana tła - GUI")
        self.pipe = pipeline("image-segmentation", model="briaai/RMBG-1.4", trust_remote_code=True)


        self.btn_bg1 = tk.Button(root, text="Tło 1", command=lambda: self.process_image("backgrounds/01_bg.png"))
        self.btn_bg2 = tk.Button(root, text="Tło 2", command=lambda: self.process_image("backgrounds/02_bg.png"))
        self.btn_bg3 = tk.Button(root, text="Tło 3", command=lambda: self.process_image("backgrounds/03_bg.png"))

        self.btn_bg1.pack()
        self.btn_bg2.pack()
        self.btn_bg3.pack()

    def load_image(self):
        """
        Loads an image and generates a mask for it.

        This method overrides the superclass's load_image method. If the file_path
        attribute is set, it uses the pipe method to generate a mask for the image
        located at file_path.

        Attributes:
            file_path (str): The path to the image file.
            mask: The generated mask for the image.
        """
        super().load_image()
        if self.file_path:
            self.mask = self.pipe(self.file_path, return_mask = True)

    def process_image(self, bg_path):
        """
        Processes the original image by replacing its background with a new background image.
        Displays new image.
        Args:
            bg_path (str): The file path to the new background image.
        Returns:
            None
        """
        if self.original_image is None:
            return
        self.update_progress(30)
        background =  np.array(Image.open(bg_path))
        background = cv2.resize(background, (self.original_image.shape[1], self.original_image.shape[0]))
        self.update_progress(60)
        mask = np.asarray(self.mask)
        mask = (mask > 0.5).astype(np.uint8)
        time.sleep(0.5)
        self.result_image = mask[:, :, np.newaxis] * self.original_image + (1 - mask[:, :, np.newaxis]) * background
        self.update_progress(90)
        time.sleep(0.5)  
        self.display_image(self.result_image)
        self.update_progress(100)
        time.sleep(0.5)
        self.update_progress(0)


if __name__ == "__main__":
    root = tk.Tk()
    app = BackgroundReplacementApp(root)
    root.mainloop()